<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Songtg0512</title>
    <link>http://Songtg0512.github.io/</link>
    
    <atom:link href="http://songtg0512.github.io/rss.xml" rel="self" type="application/rss+xml"/>
    
    <description>Songtg0512</description>
    <pubDate>Mon, 07 Dec 2020 09:15:52 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>Redisson 源码解析</title>
      <link>http://songtg0512.github.io/posts/hello_url.html</link>
      <guid>http://songtg0512.github.io/posts/hello_url.html</guid>
      <pubDate>Tue, 08 Dec 2020 12:03:00 GMT</pubDate>
      
        
        
      <description>&lt;h3 id=&quot;一、简单使用&quot;&gt;&lt;a href=&quot;#一、简单使用&quot; class=&quot;headerlink&quot; title=&quot;一、简单使用&quot;&gt;&lt;/a&gt;一、简单使用&lt;/h3&gt;&lt;h4 id=&quot;1-1-引入依赖&quot;&gt;&lt;a href=&quot;#1-1-引入依赖&quot; class=&quot;headerlink&quot; </description>
        
      
      
      
      <content:encoded><![CDATA[<h3 id="一、简单使用"><a href="#一、简单使用" class="headerlink" title="一、简单使用"></a>一、简单使用</h3><h4 id="1-1-引入依赖"><a href="#1-1-引入依赖" class="headerlink" title="1.1 引入依赖"></a>1.1 引入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.redisson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>redisson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.13.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="1-2-基本代码"><a href="#1-2-基本代码" class="headerlink" title="1.2 基本代码"></a>1.2 基本代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">// 1. Create config object</span></span><br><span class="line">        Config config = <span class="keyword">new</span> Config();</span><br><span class="line">        config.useClusterServers() <span class="comment">// 使用集群模式</span></span><br><span class="line">                .setScanInterval(<span class="number">2000</span>) <span class="comment">// 集群扫描状态，单位是毫秒</span></span><br><span class="line">                .addNodeAddress(<span class="string">"redis://127.0.0.1:7181"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. Create Redisson instance</span></span><br><span class="line">        RedissonClient redisson = Redisson.create(config);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        RLock lock = redisson.getLock(<span class="string">"anyLock"</span>);</span><br><span class="line">        <span class="comment">// 最常见的使用方法</span></span><br><span class="line">        lock.lock();</span><br><span class="line">        lock.unlock();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 加锁以后10秒钟自动解锁</span></span><br><span class="line">        <span class="comment">// 无需调用unlock方法手动解锁</span></span><br><span class="line">        lock.lock(<span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 尝试加锁，最多等待100秒，上锁以后10秒自动解锁</span></span><br><span class="line">        <span class="keyword">boolean</span> res = lock.tryLock(<span class="number">100</span>, <span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line">        <span class="keyword">if</span> (res) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// do</span></span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>详细使用，见 <a href="https://github.com/redisson/redisson/wiki/8.-分布式锁和同步器#81-可重入锁reentrant-lock" target="_blank" rel="noopener">wiki</a></p><h3 id="二、源码分析"><a href="#二、源码分析" class="headerlink" title="二、源码分析"></a>二、源码分析</h3><h4 id="2-1-可重入锁"><a href="#2-1-可重入锁" class="headerlink" title="2.1 可重入锁"></a>2.1 可重入锁</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">                        <span class="keyword">if</span> (redis.call(<span class="string">'exists'</span>, KEYS[<span class="number">1</span>]) == <span class="number">0</span>) then </span><br><span class="line">redis.call(<span class="string">'hincrby'</span>, KEYS[<span class="number">1</span>], ARGV[<span class="number">2</span>], <span class="number">1</span>); </span><br><span class="line">redis.call(<span class="string">'pexpire'</span>, KEYS[<span class="number">1</span>], ARGV[<span class="number">1</span>]); </span><br><span class="line"><span class="keyword">return</span> nil; </span><br><span class="line">end; </span><br><span class="line"><span class="keyword">if</span> (redis.call(<span class="string">'hexists'</span>, KEYS[<span class="number">1</span>], ARGV[<span class="number">2</span>]) == <span class="number">1</span>) then </span><br><span class="line">redis.call(<span class="string">'hincrby'</span>, KEYS[<span class="number">1</span>], ARGV[<span class="number">2</span>], <span class="number">1</span>); </span><br><span class="line">redis.call(<span class="string">'pexpire'</span>, KEYS[<span class="number">1</span>], ARGV[<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">return</span> nil; </span><br><span class="line">end; </span><br><span class="line"><span class="keyword">return</span> redis.call(<span class="string">'pttl'</span>, KEYS[<span class="number">1</span>]);</span><br></pre></td></tr></table></figure><p>这的话，主要就是这段 lua 脚本，分析一下的话，就是：</p><p>首先判断 KEYS[1] 这个key 值是否存在，如果存在的话，就设置一个 hash 数据结构，然后设置一个有效期返回。</p><p>如果在判断的时候 KEYS[1] 这个 key 已经存在了的话，就会给这个 key 值自增1，然后在重置一下过期时间，最后计算一下还有多长时间过期，然后返回。</p><p>这里的 KEYS[1] 就是我们在代码中设置的路径 <strong>anyLock</strong> ，使用 redisson 的话，每个客户端都会有自己的一个 Manager 类，会有属于自己的一个 UUID ，这里的 ARGV[2] 的值，就是当前的 <strong>UUID:threadId</strong> ，也就是当前的客户端id，拼接上当前的线程id。</p><p>由于 redisson 是有一个 watchdog 这样的一个机制的，默认是 30000ms ，这个实现的功能就是说，如果你这个客户端加了锁，并且在 watchdog 检查的时候，还存在并且客户端还是存活状态，那么watchdog 就会执行续约操作，这样也就是说 ARGV[1] 这个值是 30000ms 。 </p><p>因为我们这里用的 redisson 的模式是 cluster 模式，因此，在执行 lua 脚本的时候，会首先根据算法，计算出来我们需要在哪个 slot 上，这个 slot 是属于哪个节点的，最终命令会在这个节点上进行执行。</p><h4 id="2-2-watchdog"><a href="#2-2-watchdog" class="headerlink" title="2.2 watchdog"></a>2.2 watchdog</h4><p>这个机制就是保证如果锁的客户端还存在的话，会一直进行续约操作，每次会续约30秒。如果持有锁的机器宕机了的话，那么机器上的 watchdog 就不会在执行了，不执行以后，锁的时间就会慢慢过期，释放掉这把锁，最多也就是等待30秒。</p><p>基本原理的话，就是，客户端在获取到锁之后，会触发一个调度任务，每 10 秒进行一次调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">Timeout task = commandExecutor.getConnectionManager().newTimeout(<span class="keyword">new</span> TimerTask() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(Timeout timeout)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                ExpirationEntry ent = EXPIRATION_RENEWAL_MAP.get(getEntryName());</span><br><span class="line">                <span class="keyword">if</span> (ent == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                Long threadId = ent.getFirstThreadId();</span><br><span class="line">                <span class="keyword">if</span> (threadId == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                RFuture&lt;Boolean&gt; future = renewExpirationAsync(threadId);</span><br><span class="line">                future.onComplete((res, e) -&gt; &#123;</span><br><span class="line">                    <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        log.error(<span class="string">"Can't update lock "</span> + getName() + <span class="string">" expiration"</span>, e);</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    </span><br><span class="line">                    <span class="keyword">if</span> (res) &#123;</span><br><span class="line">                        <span class="comment">// reschedule itself</span></span><br><span class="line">                        renewExpiration();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, internalLockLeaseTime / <span class="number">3</span>, TimeUnit.MILLISECONDS);</span><br></pre></td></tr></table></figure><p>主要的核心就是下面这个 lua 脚本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">                        if (redis.call(&#39;hexists&#39;, KEYS[1], ARGV[2]) &#x3D;&#x3D; 1) then </span><br><span class="line">redis.call(&#39;pexpire&#39;, KEYS[1], ARGV[1]); </span><br><span class="line">return 1; </span><br><span class="line">end; </span><br><span class="line">return 0;,</span><br></pre></td></tr></table></figure><p>这个逻辑也就是判断这个 key 是否还存在着，存在的话，就直接在次续约 30秒，KEYS[1] 就是我们设置的哪个路径， ARGV[2] 就是当前客户端的 UUID 和 线程ID 的拼接。默认过期时间设置为 30秒。</p><p>当这个客户端释放锁之后，这里的key 也就不存在了，那么这个 task 任务也会停止，若客户端宕机的话，也一样会停止，这样的话，这个 key 的过期时间就不会在进行续约，其余客户端最多等待 30秒之后，便可以尝试获取这个锁。</p><h4 id="2-3-同步堵塞"><a href="#2-3-同步堵塞" class="headerlink" title="2.3 同步堵塞"></a>2.3 同步堵塞</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (redis.call(<span class="string">'exists'</span>, KEYS[<span class="number">1</span>]) == <span class="number">0</span>) then </span><br><span class="line">redis.call(<span class="string">'hincrby'</span>, KEYS[<span class="number">1</span>], ARGV[<span class="number">2</span>], <span class="number">1</span>); </span><br><span class="line">redis.call(<span class="string">'pexpire'</span>, KEYS[<span class="number">1</span>], ARGV[<span class="number">1</span>]); </span><br><span class="line"><span class="keyword">return</span> nil; </span><br><span class="line">end; </span><br><span class="line"><span class="keyword">if</span> (redis.call(<span class="string">'hexists'</span>, KEYS[<span class="number">1</span>], ARGV[<span class="number">2</span>]) == <span class="number">1</span>) then </span><br><span class="line">redis.call(<span class="string">'hincrby'</span>, KEYS[<span class="number">1</span>], ARGV[<span class="number">2</span>], <span class="number">1</span>); </span><br><span class="line">redis.call(<span class="string">'pexpire'</span>, KEYS[<span class="number">1</span>], ARGV[<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">return</span> nil; </span><br><span class="line">end; </span><br><span class="line"><span class="keyword">return</span> redis.call(<span class="string">'pttl'</span>, KEYS[<span class="number">1</span>]);</span><br></pre></td></tr></table></figure><p>如果当前已经有一个客户端获取到锁了之后，这时有另外一个客户端来获取锁，key 的话就会是当前客户端的 id 加上当前线程的id , 这样的话，两个 if 都是不满足的，最后就是会返回 当前主 key 的剩余时间。</p><p>如果获取锁成功的话， 最后的返回结果是个 nil , 当返回其他的时候，就代表加锁失败，这里返回的是剩余时间，自然不是 nil , 就会走下面这个 while(true) 的死循环，这里主要就是去重试获取锁，如果再次尝试还是获取不到的话，就会等待 <strong>ttl</strong> 时间后再去获取锁，一直阻塞到获取到锁。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                ttl = tryAcquire(-<span class="number">1</span>, leaseTime, unit, threadId);</span><br><span class="line">                <span class="comment">// lock acquired</span></span><br><span class="line">                <span class="keyword">if</span> (ttl == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// waiting for message</span></span><br><span class="line">                <span class="keyword">if</span> (ttl &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        future.getNow().getLatch().tryAcquire(ttl, TimeUnit.MILLISECONDS);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (interruptibly) &#123;</span><br><span class="line">                            <span class="keyword">throw</span> e;</span><br><span class="line">                        &#125;</span><br><span class="line">                        future.getNow().getLatch().tryAcquire(ttl, TimeUnit.MILLISECONDS);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (interruptibly) &#123;</span><br><span class="line">                        future.getNow().getLatch().acquire();</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        future.getNow().getLatch().acquireUninterruptibly();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><h4 id="2-4-释放锁"><a href="#2-4-释放锁" class="headerlink" title="2.4 释放锁"></a>2.4 释放锁</h4><h5 id="宕机自动释放锁"><a href="#宕机自动释放锁" class="headerlink" title="宕机自动释放锁"></a>宕机自动释放锁</h5><p>如果这个机器宕机了，那么 watchdog 的定时调度任务就没有了，也就是说，最多过 30秒之后，key 就到期了，就会自动释放锁。</p><h5 id="主动释放锁"><a href="#主动释放锁" class="headerlink" title="主动释放锁"></a>主动释放锁</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">                  <span class="string">"if (redis.call('hexists', KEYS[1], ARGV[3]) == 0) then "</span> +</span><br><span class="line">                  <span class="string">"return nil;"</span> +</span><br><span class="line">                  <span class="string">"end; "</span> +</span><br><span class="line">                  <span class="string">"local counter = redis.call('hincrby', KEYS[1], ARGV[3], -1); "</span> +</span><br><span class="line">                  <span class="string">"if (counter &gt; 0) then "</span> +</span><br><span class="line">                  <span class="string">"redis.call('pexpire', KEYS[1], ARGV[2]); "</span> +</span><br><span class="line">                  <span class="string">"return 0; "</span> +</span><br><span class="line">                  <span class="string">"else "</span> +</span><br><span class="line">                  <span class="string">"redis.call('del', KEYS[1]); "</span> +</span><br><span class="line">                  <span class="string">"redis.call('publish', KEYS[2], ARGV[1]); "</span> +</span><br><span class="line">                  <span class="string">"return 1; "</span> +</span><br><span class="line">                  <span class="string">"end; "</span> +</span><br><span class="line">                  <span class="string">"return nil;"</span>,</span><br><span class="line">Arrays.asList(getName(), getChannelName()), LockPubSub.UNLOCK_MESSAGE, internalLockLeaseTime, getLockName(threadId));</span><br></pre></td></tr></table></figure><p>这一段 lua 脚本就是执行释放锁的关键所在，</p><ul><li><ul><li><ul><li>KEYS[1] = 我们最开始设置的 key 值，</li><li>KEYS[2] =  getChannelName() = redisson_lock__channel_KEYS[1]</li><li>ARGV[1] = LockPubSub.UNLOCK_MESSAGE = 0L</li><li>ARGV[2] = internalLockLeaseTime = 30S</li><li>ARGV[3] = getLockName(threadId) = 当前锁客户端的 UUID 拼接 当前的线程 ID</li></ul></li></ul></li></ul><p>这里知道这几个值都代表是什么之后，就比较清晰了：首先判断是不是存在这个锁，如果不存在的话，直接返回 null；</p><p>然后，如果这个 key 存在的话，就会对这个锁的值，进行递减，拿到递减之后的结果，对这个结果进行判断，如果是等于 0 ， 也就代表就只加锁的了一次，这样就直接通过 del 指令，删除掉这个 key ，并通过发布订阅，发布一条消息。</p><p>如果不等于 0 的话，就代表这个可重入锁，加了多次，那么会进行一次过期时间的刷新，在刷新成 30 S。</p><h4 id="2-5-尝试获取锁超时与超时锁自动释放"><a href="#2-5-尝试获取锁超时与超时锁自动释放" class="headerlink" title="2.5 尝试获取锁超时与超时锁自动释放"></a>2.5 尝试获取锁超时与超时锁自动释放</h4><p>redisson 提供了一个高阶用法，这个就是说，尝试100s，如果100s还获取不到锁就放弃；如果获取到锁，只会占有这个锁 10s , 如果 10s 还没有释放锁，就会自动进行释放。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">boolean</span> res = lock.tryLock(<span class="number">100</span>, <span class="number">10</span>, TimeUnit.SECONDS);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">long</span> time = unit.toMillis(waitTime);</span><br><span class="line">        <span class="comment">// 获取到当前时间</span></span><br><span class="line">        <span class="keyword">long</span> current = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">long</span> threadId = Thread.currentThread().getId();</span><br><span class="line">        <span class="comment">// 去尝试获取锁</span></span><br><span class="line">        Long ttl = tryAcquire(waitTime, leaseTime, unit, threadId);</span><br><span class="line">        <span class="comment">// lock acquired</span></span><br><span class="line">        <span class="keyword">if</span> (ttl == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 对剩余时间进行递减</span></span><br><span class="line">        time -= System.currentTimeMillis() - current;</span><br><span class="line">        <span class="keyword">if</span> (time &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            acquireFailed(waitTime, unit, threadId);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        current = System.currentTimeMillis();</span><br><span class="line">         ... ... ...</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 递减剩余时间 </span></span><br><span class="line">            time -= System.currentTimeMillis() - current;</span><br><span class="line">            <span class="keyword">if</span> (time &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                acquireFailed(waitTime, unit, threadId);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        </span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123; <span class="comment">// 死循环尝试获取，获取失败，递减剩余时间</span></span><br><span class="line">                <span class="keyword">long</span> currentTime = System.currentTimeMillis();</span><br><span class="line">                ttl = tryAcquire(waitTime, leaseTime, unit, threadId);</span><br><span class="line">                <span class="comment">// lock acquired</span></span><br><span class="line">                <span class="keyword">if</span> (ttl == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                time -= System.currentTimeMillis() - currentTime;</span><br><span class="line">                <span class="keyword">if</span> (time &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    acquireFailed(waitTime, unit, threadId);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// waiting for message</span></span><br><span class="line">                currentTime = System.currentTimeMillis();</span><br><span class="line">                <span class="keyword">if</span> (ttl &gt;= <span class="number">0</span> &amp;&amp; ttl &lt; time) &#123;</span><br><span class="line">                    subscribeFuture.getNow().getLatch().tryAcquire(ttl, TimeUnit.MILLISECONDS);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    subscribeFuture.getNow().getLatch().tryAcquire(time, TimeUnit.MILLISECONDS);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                time -= System.currentTimeMillis() - currentTime;</span><br><span class="line">                <span class="keyword">if</span> (time &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    acquireFailed(waitTime, unit, threadId);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            unsubscribe(subscribeFuture, threadId);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h5 id="尝试获取锁超时："><a href="#尝试获取锁超时：" class="headerlink" title="尝试获取锁超时："></a>尝试获取锁超时：</h5><p>主要就是通过获取到 <strong>最开始的时间</strong> ，先进行一次 <strong>尝试获取锁</strong> ，若获取锁失败，用 <strong>设置的时间</strong> - <strong>用了的时间</strong> ，进入一个 <strong>while(true) 的死循环</strong> ，再次尝试获取锁，其逻辑和上面获取锁的逻辑是一样的，如果获取失败，就更新剩余时间，并进行阻塞，等到剩余时间归零之后，会返回 <strong>false</strong> ，表示获取锁失败。</p><h5 id="超时自动释放："><a href="#超时自动释放：" class="headerlink" title="超时自动释放："></a>超时自动释放：</h5><p>这个逻辑是和 尝试获取锁逻辑有关联的，在尝试获取锁的时候，有这一段代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (leaseTime != -<span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> tryLockInnerAsync(waitTime, leaseTime, unit, threadId, RedisCommands.EVAL_LONG);</span><br><span class="line">&#125;</span><br><span class="line">        RFuture&lt;Long&gt; ttlRemainingFuture = tryLockInnerAsync(waitTime,</span><br><span class="line">                                                commandExecutor.getConnectionManager().getCfg().getLockWatchdogTimeout(),</span><br><span class="line">                                                TimeUnit.MILLISECONDS, threadId, RedisCommands.EVAL_LONG);</span><br></pre></td></tr></table></figure><p>如果我们使用的不是这个高阶用法的话，这时 <strong>leaseTime</strong> 字段值是 -1 ， 那么 if 里面就不会走，转而走下面这个， <strong>leaseTime 也就变成了默认值 30000ms</strong> ，但在这里，我们设置了锁的过期时间是 10s，也就是 lease  = 10000ms ， 那么在执行加锁的时候，就会设置这个锁的 key ,并将其过期时间设置为 10s。</p><p>另外还有一点就是，如果我们设置了 leaseTime ，在这个 if 里面，就直接返回了，如果走默认的话，会根据加锁的返回值，判断需不需要加调度任务，也就是 watchdog ， 也就是说，这里我们设置了 <strong>leaseTime</strong> 之后，是不会加入 watchdog 的，它只有 10s 的生存时间，到时间后，会自动释放。</p><h4 id="2-6-隐患"><a href="#2-6-隐患" class="headerlink" title="2.6 隐患"></a>2.6 隐患</h4><p>假设客户端刚刚在 master 上写入了一个锁，此时发生了 master 的宕机，master 还每来得及将锁异步同步到 slave ，slave 就切换成了 master ， 此时别的客户端在进行加锁的话，会成功获取锁，这时候，就会产生两个客户端持有同一把分布式锁的问题，可能会导致一些数据问题。</p><h4 id="2-7-可重入锁总结"><a href="#2-7-可重入锁总结" class="headerlink" title="2.7 可重入锁总结"></a>2.7 可重入锁总结</h4><ul><li>加锁：redis 中设置 hash 结构，默认过期时间为 30000ms。</li><li>维持加锁：后台有一个调度任务，每10秒钟调度一次，只要客户端和key 都还存在，就会刷新当前 key 的过期时间。</li><li>锁互斥：别的客户端或者别的线程再来加锁，会陷入 while(true) 的死循环中，等待。</li><li>可重入锁：同一个线程可以加锁多次，每次的话，就是在 hash 结构上自增1。</li><li>手动释放锁：在 hash 结构上递减1，对比剩余个数是否为0，为0则直接删除 key。</li><li>宕机释放锁：当客户端宕机之后，后台的调度任务就会取消，key 的过期时间就不会在被刷新，默认30s后，key 自动消失。</li><li>尝试加锁超时：在循环中，一直尝试获取锁，若时间到了之后，还没有获取到，就退出循环，返回 false。</li><li>自动释放锁：在加锁的时候，设置超时时间，这样就不会有调度任务，key 会在设置的过期时间之后过期。</li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/37fbe68b9d92447aa0c883260b5ec8a5~tplv-k3u1fbpfcp-zoom-1.image" alt="redisson - 可重入锁.png"></p><h3 id="三、公平锁"><a href="#三、公平锁" class="headerlink" title="三、公平锁"></a>三、公平锁</h3><h4 id="3-1-加锁"><a href="#3-1-加锁" class="headerlink" title="3.1 加锁"></a>3.1 加锁</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">RLock fairLock = redisson.getFairLock(<span class="string">"anyLock"</span>);</span><br><span class="line"><span class="comment">// 最常见的使用方法</span></span><br><span class="line">fairLock.lock();</span><br></pre></td></tr></table></figure><p>主要就是下面这段 lua 脚本，实现了基本的逻辑，用了 set 和 list 的数据结构</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">  <span class="string">"while true do "</span></span><br><span class="line">  + <span class="string">"local firstThreadId2 = redis.call('lindex', KEYS[2], 0);"</span></span><br><span class="line">  + <span class="string">"if firstThreadId2 == false then "</span></span><br><span class="line">      + <span class="string">"break;"</span></span><br><span class="line">  + <span class="string">"end; "</span></span><br><span class="line">  + <span class="string">"local timeout = tonumber(redis.call('zscore', KEYS[3], firstThreadId2));"</span></span><br><span class="line">  + <span class="string">"if timeout &lt;= tonumber(ARGV[4]) then "</span></span><br><span class="line">      + <span class="string">"redis.call('zrem', KEYS[3], firstThreadId2); "</span></span><br><span class="line">      + <span class="string">"redis.call('lpop', KEYS[2]); "</span></span><br><span class="line">  + <span class="string">"else "</span></span><br><span class="line">      + <span class="string">"break;"</span></span><br><span class="line">  + <span class="string">"end; "</span></span><br><span class="line">+ <span class="string">"end;"</span></span><br><span class="line">  </span><br><span class="line">    + <span class="string">"if (redis.call('exists', KEYS[1]) == 0) and ((redis.call('exists', KEYS[2]) == 0) "</span></span><br><span class="line">          + <span class="string">"or (redis.call('lindex', KEYS[2], 0) == ARGV[2])) then "</span> +</span><br><span class="line">          <span class="string">"redis.call('lpop', KEYS[2]); "</span> +</span><br><span class="line">          <span class="string">"redis.call('zrem', KEYS[3], ARGV[2]); "</span> +</span><br><span class="line">          <span class="string">"redis.call('hset', KEYS[1], ARGV[2], 1); "</span> +</span><br><span class="line">          <span class="string">"redis.call('pexpire', KEYS[1], ARGV[1]); "</span> +</span><br><span class="line">          <span class="string">"return nil; "</span> +</span><br><span class="line">      <span class="string">"end; "</span> +</span><br><span class="line">      <span class="string">"if (redis.call('hexists', KEYS[1], ARGV[2]) == 1) then "</span> +</span><br><span class="line">          <span class="string">"redis.call('hincrby', KEYS[1], ARGV[2], 1); "</span> +</span><br><span class="line">          <span class="string">"redis.call('pexpire', KEYS[1], ARGV[1]); "</span> +</span><br><span class="line">          <span class="string">"return nil; "</span> +</span><br><span class="line">      <span class="string">"end; "</span> +</span><br><span class="line">          </span><br><span class="line">      <span class="string">"local firstThreadId = redis.call('lindex', KEYS[2], 0); "</span> +</span><br><span class="line">      <span class="string">"local ttl; "</span> + </span><br><span class="line">      <span class="string">"if firstThreadId ~= false and firstThreadId ~= ARGV[2] then "</span> + </span><br><span class="line">          <span class="string">"ttl = tonumber(redis.call('zscore', KEYS[3], firstThreadId)) - tonumber(ARGV[4]);"</span> + </span><br><span class="line">      <span class="string">"else "</span></span><br><span class="line">        + <span class="string">"ttl = redis.call('pttl', KEYS[1]);"</span> + </span><br><span class="line">      <span class="string">"end; "</span> + </span><br><span class="line">          </span><br><span class="line">      <span class="string">"local timeout = ttl + tonumber(ARGV[3]);"</span> + </span><br><span class="line">      <span class="string">"if redis.call('zadd', KEYS[3], timeout, ARGV[2]) == 1 then "</span> +</span><br><span class="line">          <span class="string">"redis.call('rpush', KEYS[2], ARGV[2]);"</span> +</span><br><span class="line">      <span class="string">"end; "</span> +</span><br><span class="line">      <span class="string">"return ttl;"</span>, </span><br><span class="line">      Arrays.&lt;Object&gt;asList(getName(), threadsQueueName, timeoutSetName), </span><br><span class="line">                  internalLockLeaseTime, getLockName(threadId), currentTime + threadWaitTime, currentTime);</span><br></pre></td></tr></table></figure><table><thead><tr><th>KEYS[1]</th><th>getName()</th><th>设置的锁key (anyLock)</th></tr></thead><tbody><tr><td>KEYS[2]</td><td>threadsQueueName</td><td>redisson_lock_queue:{anyLock}</td></tr><tr><td>KEYS[3]</td><td>timeoutSetName</td><td>redisson_lock_timeout:{anyLock}</td></tr><tr><td>ARGV[1]</td><td>internalLockLeaseTime</td><td>30000ms</td></tr><tr><td>ARGV[2]</td><td>getLockName(threadId)</td><td>客户端的uuid 拼接当前线程 id</td></tr><tr><td>ARGV[3]</td><td>currentTime + threadWaitTime</td><td>当前时间 + 5000</td></tr><tr><td>ARGV[4]</td><td>currentTime</td><td>当前时间</td></tr></tbody></table><h5 id=""><a href="#" class="headerlink" title=""></a></h5><h5 id="3-1-1-首次加锁"><a href="#3-1-1-首次加锁" class="headerlink" title="3.1.1 首次加锁"></a>3.1.1 首次加锁</h5><p>我们假设现在只有 <strong>客户端A</strong> 来进行加锁，首先会通过 redis.call(‘lindex’, redisson_lock_queue:{anyLock}, 0) 这个命令，弹出来这个队列中第一个元素，如果这个队列中没有元素的话，则返回 false ，那么此时会进行判断，如果返回的是 false ，就直接退出 while(true) 的循环。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (redis.call(<span class="string">'exists'</span>, KEYS[<span class="number">1</span>]) == <span class="number">0</span>) and ((redis.call(<span class="string">'exists'</span>, KEYS[<span class="number">2</span>]) == <span class="number">0</span>) </span><br><span class="line">    or (redis.call(<span class="string">'lindex'</span>, KEYS[<span class="number">2</span>], <span class="number">0</span>) == ARGV[<span class="number">2</span>])) then</span><br></pre></td></tr></table></figure><p>  接着会走入上面的命令，此时因为是第一次加锁，所以第一个 exists 肯定是等于 0 ，第二个 exists 也是等于0的 ，满足条件，执行下面的逻辑，lpop 弹出 redisson_lock_queue:{anyLock} ，因为此时队列中是空的，这个也没什么效果，zrem 删除 redisson_lock_timeout:{anyLock} ，这个目前也是空的，后面两个就是之前重入锁的逻辑，去进行 set 赋值，然后设置默认的过期时间为 30s，最后返回一个 nil ，通过上面分析 <strong>可重入锁</strong> ，我们知道返回 nil 的时候，就是代表加锁成功的，这时会有一个调度任务 watchdog 每10秒中检查一下 key ，进行key的续约。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">                            redis.call(<span class="string">'lpop'</span>, KEYS[<span class="number">2</span>]);</span><br><span class="line">redis.call(<span class="string">'zrem'</span>, KEYS[<span class="number">3</span>], ARGV[<span class="number">2</span>]);</span><br><span class="line">redis.call(<span class="string">'hset'</span>, KEYS[<span class="number">1</span>], ARGV[<span class="number">2</span>], <span class="number">1</span>); </span><br><span class="line">redis.call(<span class="string">'pexpire'</span>, KEYS[<span class="number">1</span>], ARGV[<span class="number">1</span>]); </span><br><span class="line"><span class="keyword">return</span> nil;</span><br></pre></td></tr></table></figure><h5 id="3-1-2-客户端B-加锁"><a href="#3-1-2-客户端B-加锁" class="headerlink" title="3.1.2 客户端B 加锁"></a>3.1.2 客户端B 加锁</h5><p>分析完了直接加锁，那么现在让客户端B 也来加锁，首先还是判断 redis.call(‘lindex’, redisson_lock_queue:{anyLock}, 0) ， 这时这个队列中还是空的，返回值肯定还是 false ，直接退出 while 循环，继续往下走</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">                        local timeout = ttl + tonumber(ARGV[<span class="number">3</span>]);</span><br><span class="line"><span class="keyword">if</span> redis.call(<span class="string">'zadd'</span>, KEYS[<span class="number">3</span>], timeout, ARGV[<span class="number">2</span>]) == <span class="number">1</span> then </span><br><span class="line">    redis.call(<span class="string">'rpush'</span>, KEYS[<span class="number">2</span>], ARGV[<span class="number">2</span>]);</span><br><span class="line">end;  </span><br><span class="line"><span class="keyword">return</span> ttl;</span><br></pre></td></tr></table></figure><p>发现只满足这段逻辑，计算一个 timeout  = 当前时间 + 5000ms ， 然后执行 zadd redisson_lock_timeout:{anyLock} , timeout, uuid+threadId，这个主要逻辑就是往 set 集合中插入一条数据，分数为 timeout ，值是当前客户端的UUID拼接上当前的线程ID，然后返回过期时间，通过之前分析可重入锁的时候，我们可以知道，当返回值不是 nil 的时候，是代表加锁失败的，这时候就是会进入到 while(true) 的死循环中，间隔时间去尝试重新获取锁。</p><h5 id="3-1-3-客户端C-加锁"><a href="#3-1-3-客户端C-加锁" class="headerlink" title="3.1.3 客户端C 加锁"></a>3.1.3 客户端C 加锁</h5><p>现在客户端B加锁失败，相关信息也放入到了队列当中，那么 客户端C 此时也来获取锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">local firstThreadId = redis.call(<span class="string">'lindex'</span>, KEYS[<span class="number">2</span>], <span class="number">0</span>); </span><br><span class="line">local ttl; </span><br><span class="line"><span class="keyword">if</span> firstThreadId ~= <span class="keyword">false</span> and firstThreadId ~= ARGV[<span class="number">2</span>] then </span><br><span class="line">ttl = tonumber(redis.call(<span class="string">'zscore'</span>, KEYS[<span class="number">3</span>], firstThreadId)) - tonumber(ARGV[<span class="number">4</span>]);</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">ttl = redis.call(<span class="string">'pttl'</span>, KEYS[<span class="number">1</span>]);</span><br><span class="line">end;</span><br></pre></td></tr></table></figure><p>主要就是执行这段逻辑，首先从队列中弹出来第一个元素，元素不为空且不是当前客户端，这时拿到的是 客户端B的值，uuidB+threadIdB，从 set 排序集中获取分数，用获取到的客户端B的分数，减去当前客户端C加锁时的（当前时间 + 5000ms） ，然后在执行客户端 B 加锁的那段，将自己加入到队列和集合中去，进行排队。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">                        local timeout = ttl + tonumber(ARGV[<span class="number">3</span>]);</span><br><span class="line"><span class="keyword">if</span> redis.call(<span class="string">'zadd'</span>, KEYS[<span class="number">3</span>], timeout, ARGV[<span class="number">2</span>]) == <span class="number">1</span> then </span><br><span class="line">    redis.call(<span class="string">'rpush'</span>, KEYS[<span class="number">2</span>], ARGV[<span class="number">2</span>]);</span><br><span class="line">end;  </span><br><span class="line"><span class="keyword">return</span> ttl;</span><br></pre></td></tr></table></figure><h4 id="3-2-可重入加锁"><a href="#3-2-可重入加锁" class="headerlink" title="3.2 可重入加锁"></a>3.2 可重入加锁</h4><p>核心逻辑就是获取到哪个 key ，去执行 incr 对值进行递增，重置一下生存时间。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">                        <span class="keyword">if</span> (redis.call(<span class="string">'hexists'</span>, KEYS[<span class="number">1</span>], ARGV[<span class="number">2</span>]) == <span class="number">1</span>) then</span><br><span class="line">redis.call(<span class="string">'hincrby'</span>, KEYS[<span class="number">1</span>], ARGV[<span class="number">2</span>], <span class="number">1</span>);</span><br><span class="line">redis.call(<span class="string">'pexpire'</span>, KEYS[<span class="number">1</span>], ARGV[<span class="number">1</span>]); </span><br><span class="line"><span class="keyword">return</span> nil;</span><br></pre></td></tr></table></figure><h4 id="3-3-队列分数刷新"><a href="#3-3-队列分数刷新" class="headerlink" title="3.3 队列分数刷新"></a>3.3 队列分数刷新</h4><p>客户端B 和 客户端C 在循环中一直去尝试获取锁，在执行上面 lua 脚本时，基本都是不满足的 ，会执行到下面这段</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"local firstThreadId = redis.call('lindex', KEYS[2], 0); "</span> +</span><br><span class="line">local ttl; <span class="string">" + </span></span><br><span class="line"><span class="string">                        "</span><span class="keyword">if</span> firstThreadId ~= <span class="keyword">false</span> and firstThreadId ~= ARGV[<span class="number">2</span>] then <span class="string">" + </span></span><br><span class="line"><span class="string">                            "</span>ttl = tonumber(redis.call(<span class="string">'zscore'</span>, KEYS[<span class="number">3</span>], firstThreadId)) - tonumber(ARGV[<span class="number">4</span>]);<span class="string">" + </span></span><br><span class="line"><span class="string">                        "</span><span class="keyword">else</span> <span class="string">"</span></span><br><span class="line"><span class="string">                          + "</span>ttl = redis.call(<span class="string">'pttl'</span>, KEYS[<span class="number">1</span>]);<span class="string">" + </span></span><br><span class="line"><span class="string">                        "</span>end; <span class="string">" + </span></span><br><span class="line"><span class="string">                            </span></span><br><span class="line"><span class="string">                        "</span>local timeout = ttl + tonumber(ARGV[<span class="number">3</span>]);<span class="string">" + </span></span><br><span class="line"><span class="string">                        "</span><span class="keyword">if</span> redis.call(<span class="string">'zadd'</span>, KEYS[<span class="number">3</span>], timeout, ARGV[<span class="number">2</span>]) == <span class="number">1</span> then <span class="string">" +</span></span><br><span class="line"><span class="string">                            "</span>redis.call(<span class="string">'rpush'</span>, KEYS[<span class="number">2</span>], ARGV[<span class="number">2</span>]);<span class="string">" +</span></span><br><span class="line"><span class="string">                        "</span>end; <span class="string">" +</span></span><br></pre></td></tr></table></figure><p>这时我们假设是客户端B 先执行到这，它会去执行 pttl 看下客户端A上的锁，还有多少的生存时间，然后拿着这个 ttl 加上（当前时间 + 5000） 算出来这个 timeout 的值，再通过 zadd 将客户端B的分数值进行下刷新，这里的话，是客户端B第二次执行 zadd 了，所以这个的返回值是 0 ， 就不会再将客户端B 放入到队列中去。</p><p>此时，轮到客户端C执行的时候，也是一个同样的逻辑，所以他们在排队集合中的顺序是不会发生改变的且不会多次将自身添加的排队队列中去。</p><h4 id="3-4-队列重排"><a href="#3-4-队列重排" class="headerlink" title="3.4 队列重排"></a>3.4 队列重排</h4><p>如果客户端B因为各种原因，长时间没有重新去获取锁，导致了分数一直没有刷新，然后客户端C尝试获取锁，从队列中获取到客户端B ，但发现由于客户端B长时间没有更新时间，导致分数值小于了当前时间，那么就会执行 zrem ，和 lpop ， 从排序集合和排队队列上去除掉客户端B，现在是在一个 while 循环中，执行完删除之后，客户端C 继续走这段逻辑，从排队队列中获取到自己，发现自己的分数也是小于当前时间的，会继续执行 zream ,rpop ，移除掉自身，走到最后，将自己重新加入到队列和集合中。</p><p>这时，客户端B，恢复正常，回来尝试加锁，在走之前的逻辑，让自己重新入队。那么现在排队队列和排序集合中的顺序较之最开始已经发现了变化，这就是队列重排。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"while true do "</span></span><br><span class="line">                    + <span class="string">"local firstThreadId2 = redis.call('lindex', KEYS[2], 0);"</span></span><br><span class="line">                    + <span class="string">"if firstThreadId2 == false then "</span></span><br><span class="line">                        + <span class="string">"break;"</span></span><br><span class="line">                    + <span class="string">"end; "</span></span><br><span class="line">                    + <span class="string">"local timeout = tonumber(redis.call('zscore', KEYS[3], firstThreadId2));"</span></span><br><span class="line">                    + <span class="string">"if timeout &lt;= tonumber(ARGV[4]) then "</span></span><br><span class="line">                        + <span class="string">"redis.call('zrem', KEYS[3], firstThreadId2); "</span></span><br><span class="line">                        + <span class="string">"redis.call('lpop', KEYS[2]); "</span></span><br><span class="line">                    + <span class="string">"else "</span></span><br><span class="line">                        + <span class="string">"break;"</span></span><br><span class="line">                    + <span class="string">"end; "</span></span><br><span class="line">                  + <span class="string">"end;"</span></span><br></pre></td></tr></table></figure><p>从这里，我们可以看到，在一个客户端刚刚加锁之后，其他的客户端来争抢着把锁，刚开始在一定时间范围之内，时间不要过长，各个客户端是可以按照公平的节奏，在队列和集合中保持有序的。</p><p>在一定时间范围内，时间不要过长，这样队列和集合中的数据顺序是不会变得，各个客户端都会定期刷新自己的分数值。</p><p>但如果客户端A 持有锁的时间过长 ， 可能会在 while true 的死循环中将一些等待时间过长的客户端从队列和集合中删除，一旦删除之后，就会发生各个客户端随着自己重新尝试加锁的时间顺序，重新进行排序，加入到队列和集合中。</p><h4 id="3-5-释放锁"><a href="#3-5-释放锁" class="headerlink" title="3.5 释放锁"></a>3.5 释放锁</h4><p>客户端A 来释放锁的时候，也是会过来走这个 while true 的循环，看一下有序集合中的元素的 timeout 时间，如果小于了当前时间，就将其删除掉，让他后面的都进行一下重排序。</p><p>在这的话，客户端B 和 客户端C 在尝试获取锁的时候，都是用的 <strong>tryAcquire</strong> 方法，会有一个获取锁的超时时间，当超过这个时间之后，就不会再去尝试获取锁了，但队列和集合中的数据还是存在的，所以这个 while true 就是会对这种数据进行剔除。哪怕客户端宕机了，那么分数就不会刷新，在执行 while true 的时候，早晚会将其从集合和队列中移除。</p><p>后面的逻辑就是进行一些判断，发布一些消息，如果一切正常的话，就是会执行 del 命令，将 key 删除掉。因为是可重入，会进行递减1，判断是否为 0 ，不为0则重置一下生存时间。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"while true do "</span></span><br><span class="line">                + <span class="string">"local firstThreadId2 = redis.call('lindex', KEYS[2], 0);"</span></span><br><span class="line">                + <span class="string">"if firstThreadId2 == false then "</span></span><br><span class="line">                    + <span class="string">"break;"</span></span><br><span class="line">                + <span class="string">"end; "</span></span><br><span class="line">                + <span class="string">"local timeout = tonumber(redis.call('zscore', KEYS[3], firstThreadId2));"</span></span><br><span class="line">                + <span class="string">"if timeout &lt;= tonumber(ARGV[4]) then "</span></span><br><span class="line">                    + <span class="string">"redis.call('zrem', KEYS[3], firstThreadId2); "</span></span><br><span class="line">                    + <span class="string">"redis.call('lpop', KEYS[2]); "</span></span><br><span class="line">                + <span class="string">"else "</span></span><br><span class="line">                    + <span class="string">"break;"</span></span><br><span class="line">                + <span class="string">"end; "</span></span><br><span class="line">              + <span class="string">"end;"</span></span><br><span class="line">                </span><br><span class="line">              + <span class="string">"if (redis.call('exists', KEYS[1]) == 0) then "</span> + </span><br><span class="line">                    <span class="string">"local nextThreadId = redis.call('lindex', KEYS[2], 0); "</span> + </span><br><span class="line">                    <span class="string">"if nextThreadId ~= false then "</span> +</span><br><span class="line">                        <span class="string">"redis.call('publish', KEYS[4] .. ':' .. nextThreadId, ARGV[1]); "</span> +</span><br><span class="line">                    <span class="string">"end; "</span> +</span><br><span class="line">                    <span class="string">"return 1; "</span> +</span><br><span class="line">                <span class="string">"end;"</span> +</span><br><span class="line">                <span class="string">"if (redis.call('hexists', KEYS[1], ARGV[3]) == 0) then "</span> +</span><br><span class="line">                    <span class="string">"return nil;"</span> +</span><br><span class="line">                <span class="string">"end; "</span> +</span><br><span class="line">                <span class="string">"local counter = redis.call('hincrby', KEYS[1], ARGV[3], -1); "</span> +</span><br><span class="line">                <span class="string">"if (counter &gt; 0) then "</span> +</span><br><span class="line">                    <span class="string">"redis.call('pexpire', KEYS[1], ARGV[2]); "</span> +</span><br><span class="line">                    <span class="string">"return 0; "</span> +</span><br><span class="line">                <span class="string">"end; "</span> +</span><br><span class="line">                    </span><br><span class="line">                <span class="string">"redis.call('del', KEYS[1]); "</span> +</span><br><span class="line">                <span class="string">"local nextThreadId = redis.call('lindex', KEYS[2], 0); "</span> + </span><br><span class="line">                <span class="string">"if nextThreadId ~= false then "</span> +</span><br><span class="line">                    <span class="string">"redis.call('publish', KEYS[4] .. ':' .. nextThreadId, ARGV[1]); "</span> +</span><br><span class="line">                <span class="string">"end; "</span> +</span><br><span class="line">                <span class="string">"return 1; "</span>,</span><br></pre></td></tr></table></figure><p>当客户端A 将锁释放后，这时，客户端C再去走加锁逻辑，这时 key 是空的了，而且队头是就是客户端C，那么这时，客户端C 就会将 自己从队列和集合中移除，然后在设置锁key，设置超时时间，返回 nil ，增加 watchdog。</p><h3 id="四、MultiLock"><a href="#四、MultiLock" class="headerlink" title="四、MultiLock"></a>四、MultiLock</h3><blockquote><p>将多个锁合并为一个大锁，对一个大锁进行统一的申请加锁以及释放锁，一次性锁定多个资源，再去处理任务，然后时候一次性释放</p></blockquote><h4 id="4-1-代码示例"><a href="#4-1-代码示例" class="headerlink" title="4.1 代码示例"></a>4.1 代码示例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    RLock lock1 = redissonInstance1.getLock(<span class="string">"lock1"</span>);</span><br><span class="line">    RLock lock2 = redissonInstance2.getLock(<span class="string">"lock2"</span>);</span><br><span class="line">    RLock lock3 = redissonInstance3.getLock(<span class="string">"lock3"</span>);</span><br><span class="line"></span><br><span class="line">    RedissonMultiLock lock = <span class="keyword">new</span> RedissonMultiLock(lock1, lock2, lock3);</span><br><span class="line">    <span class="comment">// 同时加锁：lock1 lock2 lock3</span></span><br><span class="line">    <span class="comment">// 所有的锁都上锁成功才算成功。</span></span><br><span class="line">    lock.lock();</span><br><span class="line">    ...</span><br><span class="line">    lock.unlock();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-2-加锁"><a href="#4-2-加锁" class="headerlink" title="4.2 加锁"></a>4.2 加锁</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lockInterruptibly</span><span class="params">(<span class="keyword">long</span> leaseTime, TimeUnit unit)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> baseWaitTime = locks.size() * <span class="number">1500</span>;</span><br><span class="line">        <span class="keyword">long</span> waitTime = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (leaseTime == -<span class="number">1</span>) &#123;</span><br><span class="line">            waitTime = baseWaitTime;</span><br><span class="line">            unit = TimeUnit.MILLISECONDS;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            waitTime = unit.toMillis(leaseTime);</span><br><span class="line">            <span class="keyword">if</span> (waitTime &lt;= <span class="number">2000</span>) &#123;</span><br><span class="line">                waitTime = <span class="number">2000</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (waitTime &lt;= baseWaitTime) &#123;</span><br><span class="line">                waitTime = ThreadLocalRandom.current().nextLong(waitTime/<span class="number">2</span>, waitTime);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                waitTime = ThreadLocalRandom.current().nextLong(baseWaitTime, waitTime);</span><br><span class="line">            &#125;</span><br><span class="line">            waitTime = unit.convert(waitTime, TimeUnit.MILLISECONDS);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (tryLock(waitTime, leaseTime, unit)) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这里的加锁逻辑比较简单，首先就是会根据锁的数量计算出来一个 <strong>baseWaitTime</strong> 这里这个值等于 4500，然后进入 while(true) 的死循环，通过 <strong>tryLock()</strong> 方法去获取锁，不过要注意的是，这里使用的是 <strong>tryLock() ，制定了获取锁的最大等待时间为 2000，默认过期时间为 30000毫秒。</strong></p><p>**<br>**</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">(<span class="keyword">long</span> waitTime, <span class="keyword">long</span> leaseTime, TimeUnit unit)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">long</span> newLeaseTime = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (leaseTime != -<span class="number">1</span>) &#123;</span><br><span class="line">            newLeaseTime = unit.toMillis(waitTime)*<span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">long</span> time = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">long</span> remainTime = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (waitTime != -<span class="number">1</span>) &#123;</span><br><span class="line">            remainTime = unit.toMillis(waitTime);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> lockWaitTime = calcLockWaitTime(remainTime);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> failedLocksLimit = failedLocksLimit();</span><br><span class="line">        List&lt;RLock&gt; acquiredLocks = <span class="keyword">new</span> ArrayList&lt;RLock&gt;(locks.size());</span><br><span class="line">        <span class="keyword">for</span> (ListIterator&lt;RLock&gt; iterator = locks.listIterator(); iterator.hasNext();) &#123;</span><br><span class="line">           </span><br><span class="line">               <span class="keyword">long</span> awaitTime = Math.min(lockWaitTime, remainTime);</span><br><span class="line">               lockAcquired = lock.tryLock(awaitTime, newLeaseTime, TimeUnit.MILLISECONDS);</span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (lockAcquired) &#123;</span><br><span class="line">                acquiredLocks.add(lock);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               ... ...</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 计算时间</span></span><br><span class="line">            <span class="keyword">if</span> (remainTime != -<span class="number">1</span>) &#123;</span><br><span class="line">                remainTime -= (System.currentTimeMillis() - time);</span><br><span class="line">                time = System.currentTimeMillis();</span><br><span class="line">                <span class="keyword">if</span> (remainTime &lt;= <span class="number">0</span>) &#123; <span class="comment">// 超时之后，释放掉锁</span></span><br><span class="line">                    unlockInner(acquiredLocks);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ... ...</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>简单来说的话，这里循环遍历我们设置好的那个 lock 集合，遍历去尝试获取锁，每次获取完锁之后，计算下剩余的时候，如果在 4500毫秒之内没有全都获取到锁，会将之前已经获取到的锁，进行释放。然后返回false，在while(true) 的死循环中，继续执行。</p><h4 id="4-3-释放锁"><a href="#4-3-释放锁" class="headerlink" title="4.3 释放锁"></a>4.3 释放锁</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;RFuture&lt;Void&gt;&gt; futures = <span class="keyword">new</span> ArrayList&lt;RFuture&lt;Void&gt;&gt;(locks.size());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (RLock lock : locks) &#123;</span><br><span class="line">            futures.add(lock.unlockAsync());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (RFuture&lt;Void&gt; future : futures) &#123;</span><br><span class="line">            future.syncUninterruptibly();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>释放锁的逻辑很简单，就是遍历这个 lock 集合，调用 lua 脚本释放锁，然后有一个等待全部执行完毕的 future。</p><h3 id="五、RedLock"><a href="#五、RedLock" class="headerlink" title="五、RedLock"></a>五、RedLock</h3><h4 id="5-1-原理"><a href="#5-1-原理" class="headerlink" title="5.1 原理"></a>5.1 原理</h4><p>如果我们要在 cluster 模式下，获取一把分布式锁，需要经过如下步骤：</p><ol><li>获取到要执行的时候的当前时间戳；</li><li>尝试在每个 master 上创建锁，设置一个较短的过期时间，一般几十毫秒的样子，在创建锁的过程中，设置一个超时时间，如果过了这个超时时间还没有获取成功，就按失败算；</li><li>尝试在大多数节点上创建出来锁 （n / 2 + 1）;</li><li>客户端计算建好锁的时间，如果建立锁的时间小于超时时间，就算创建成功；</li><li>如果锁创建失败了，就删除掉已经创建的锁；</li><li>只要别人创建了一把分布式锁，就得不断轮训去尝试偶去锁</li></ol><p>普通的 redis 分布式锁，其实是通过 hash 算法，选择一台实例创建锁就可以，但是 RedLock , 需要在 n / 2 + 1 个节点上创建成功，才算是整体成功，避免说仅仅在一个节点实例上加锁。</p><h4 id="5-2-算法实现"><a href="#5-2-算法实现" class="headerlink" title="5.2  算法实现"></a>5.2  算法实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">         RLock lock1 = redissonInstance1.getLock(<span class="string">"lock1"</span>);</span><br><span class="line">        RLock lock2 = redissonInstance2.getLock(<span class="string">"lock2"</span>);</span><br><span class="line">        RLock lock3 = redissonInstance3.getLock(<span class="string">"lock3"</span>);</span><br><span class="line"></span><br><span class="line">        RedissonRedLock lock = <span class="keyword">new</span> RedissonRedLock(lock1, lock2, lock3);</span><br><span class="line">        <span class="comment">// 同时加锁：lock1 lock2 lock3</span></span><br><span class="line">        <span class="comment">// 红锁在大部分节点上加锁成功就算成功。</span></span><br><span class="line">        lock.lock();</span><br><span class="line">        ...</span><br><span class="line">        lock.unlock();   </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedissonRedLock</span> <span class="keyword">extends</span> <span class="title">RedissonMultiLock</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Creates instance with multiple &#123;<span class="doctag">@link</span> RLock&#125; objects.</span></span><br><span class="line"><span class="comment">     * Each RLock object could be created by own Redisson instance.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> locks - array of locks</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RedissonRedLock</span><span class="params">(RLock... locks)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(locks);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">failedLocksLimit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> locks.size() - minLocksAmount(locks);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">minLocksAmount</span><span class="params">(<span class="keyword">final</span> List&lt;RLock&gt; locks)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> locks.size()/<span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">long</span> <span class="title">calcLockWaitTime</span><span class="params">(<span class="keyword">long</span> remainTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Math.max(remainTime / locks.size(), <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        unlockInner(locks);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实，redLock 这个类是 MultiLock 的一个子类，它重写了相关参数的一个计算逻辑，这里我们打三个 lock 计算</p><ul><li><ul><li>failedLocksLimit ：lock.size - lock.size() / 2 + 1 = 1 ， 这个代表允许失败的个数。</li><li>calcLockWaitTime ： remainTime / lock.size() = 4500 / 3 = 1500 , 获取每个小锁的最大等待时间</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (ListIterator&lt;RLock&gt; iterator = locks.listIterator(); iterator.hasNext();) &#123;</span><br><span class="line">            RLock lock = iterator.next();</span><br><span class="line">            <span class="keyword">boolean</span> lockAcquired;</span><br><span class="line"></span><br><span class="line">                    lockAcquired = lock.tryLock();</span><br><span class="line">                ... ...</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (lockAcquired) &#123;</span><br><span class="line">                acquiredLocks.add(lock);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (locks.size() - acquiredLocks.size() == failedLocksLimit()) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (failedLocksLimit == <span class="number">0</span>) &#123;</span><br><span class="line">                    unlockInner(acquiredLocks);</span><br><span class="line">                    <span class="keyword">if</span> (waitTime == -<span class="number">1</span> &amp;&amp; leaseTime == -<span class="number">1</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    failedLocksLimit = failedLocksLimit();</span><br><span class="line">                    acquiredLocks.clear();</span><br><span class="line">                    <span class="comment">// reset iterator</span></span><br><span class="line">                    <span class="keyword">while</span> (iterator.hasPrevious()) &#123;</span><br><span class="line">                        iterator.previous();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    failedLocksLimit--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (remainTime != -<span class="number">1</span>) &#123;</span><br><span class="line">                remainTime -= (System.currentTimeMillis() - time);</span><br><span class="line">                time = System.currentTimeMillis();</span><br><span class="line">                <span class="keyword">if</span> (remainTime &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    unlockInner(acquiredLocks);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里获取锁的逻辑没有什么变化，主要就是当尝试获取锁失败之后，会进行 else 中， <strong>lock.size - 已经获取到锁的集合的长度 == 允许失败的个数</strong> ,如果满足这个条件就直接 break ，跳出这个 for 循环，并返回 true ，表示加锁成功；如果不满足的话，会执行 <strong>允许失败的个数–</strong> ，直到个数为0，释放掉已经加过的锁，并返回 false ，表示整体加锁失败。</p><p>这里设置了三个 key ，这三个锁key 是会分布在不同的三个 redis master 实例上的，此时，别人过来加锁，用的是一样的 key ，是无法加锁成功的，因为锁已经被占用了，就会进入一个 while(true) 循环，尝试获取锁，逻辑就和之前是一样的。</p><h3 id="六、读写锁"><a href="#六、读写锁" class="headerlink" title="六、读写锁"></a>六、读写锁</h3><h4 id="6-1-读锁"><a href="#6-1-读锁" class="headerlink" title="6.1 读锁"></a>6.1 读锁</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"local mode = redis.call('hget', KEYS[1], 'mode'); "</span> +</span><br><span class="line">                                <span class="string">"if (mode == false) then "</span> +</span><br><span class="line">                                  <span class="string">"redis.call('hset', KEYS[1], 'mode', 'read'); "</span> +</span><br><span class="line">                                  <span class="string">"redis.call('hset', KEYS[1], ARGV[2], 1); "</span> +</span><br><span class="line">                                  <span class="string">"redis.call('set', KEYS[2] .. ':1', 1); "</span> +</span><br><span class="line">                                  <span class="string">"redis.call('pexpire', KEYS[2] .. ':1', ARGV[1]); "</span> +</span><br><span class="line">                                  <span class="string">"redis.call('pexpire', KEYS[1], ARGV[1]); "</span> +</span><br><span class="line">                                  <span class="string">"return nil; "</span> +</span><br><span class="line">                                <span class="string">"end; "</span> +</span><br><span class="line">                                <span class="string">"if (mode == 'read') or (mode == 'write' and redis.call('hexists', KEYS[1], ARGV[3]) == 1) then "</span> +</span><br><span class="line">                                  <span class="string">"local ind = redis.call('hincrby', KEYS[1], ARGV[2], 1); "</span> + </span><br><span class="line">                                  <span class="string">"local key = KEYS[2] .. ':' .. ind;"</span> +</span><br><span class="line">                                  <span class="string">"redis.call('set', key, 1); "</span> +</span><br><span class="line">                                  <span class="string">"redis.call('pexpire', key, ARGV[1]); "</span> +</span><br><span class="line">                                  <span class="string">"redis.call('pexpire', KEYS[1], ARGV[1]); "</span> +</span><br><span class="line">                                  <span class="string">"return nil; "</span> +</span><br><span class="line">                                <span class="string">"end;"</span> +</span><br><span class="line">                                <span class="string">"return redis.call('pttl', KEYS[1]);"</span>,</span><br><span class="line">                        Arrays.&lt;Object&gt;asList(getName(), getReadWriteTimeoutNamePrefix(threadId)), </span><br><span class="line">                        internalLockLeaseTime, getLockName(threadId), getWriteLockName(threadId));</span><br></pre></td></tr></table></figure><p>加锁主要就是在执行这段脚本，首先我们对参数进行下分析：</p><ul><li><ul><li>KEYS[1] : 当前设置的锁Key = anyLock</li><li>KEYS[2] : {锁key}:客户端的uuid:threadId:rwlock_timeout = {anyLock}:UUID_01:ThreadId_01:rwlock_timeout</li><li>ARGV[1] : 默认过期时间 = 30000ms</li><li>ARGV[2] : 客户端UUID:threadID = UUID_01:ThreadId_01</li><li>ARGV[3] :  客户端UUID:threadID:write = UUID_01:ThreadId_01:write</li></ul></li></ul><p>首先就行从 <strong>anyLock</strong> 中获取key为 mode 的值，如果值不存在的话，返回的就是 false ，会执行相关语句：</p><p><strong>hset anyLock mode read</strong>  ,        <strong>设置一个hash 值</strong></p><p><strong>hset anyLock UUID_01:ThreadId_01 1 ，</strong> 设置 key 值 为 1</p><p>set {anyLock}:UUID_01:ThreadId_01:rwlock_timeout:1 1     设置 key 值 为 1</p><p>pexpire {anyLock}:UUID_01:ThreadId_01:rwlock_timeout 30000   设置30s的过期时间</p><p>pexpire anyLock 30000     设置 30s 的过期时间</p><p>然后返回 nil ,表示加锁成功，之后的逻辑和之前一样，如果加锁成功的话，会触发一个调度任务，增加 watchdog ， 每隔10秒，检查一下 key 是否还被占有，刷新一下生存时间。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"local counter = redis.call('hget', KEYS[1], ARGV[2]); "</span> +</span><br><span class="line">                <span class="string">"if (counter ~= false) then "</span> +</span><br><span class="line">                    <span class="string">"redis.call('pexpire', KEYS[1], ARGV[1]); "</span> +</span><br><span class="line">                    </span><br><span class="line">                    <span class="string">"if (redis.call('hlen', KEYS[1]) &gt; 1) then "</span> +</span><br><span class="line">                        <span class="string">"local keys = redis.call('hkeys', KEYS[1]); "</span> + </span><br><span class="line">                        <span class="string">"for n, key in ipairs(keys) do "</span> + </span><br><span class="line">                            <span class="string">"counter = tonumber(redis.call('hget', KEYS[1], key)); "</span> + </span><br><span class="line">                            <span class="string">"if type(counter) == 'number' then "</span> + </span><br><span class="line">                                <span class="string">"for i=counter, 1, -1 do "</span> + </span><br><span class="line">                                    <span class="string">"redis.call('pexpire', KEYS[2] .. ':' .. key .. ':rwlock_timeout:' .. i, ARGV[1]); "</span> + </span><br><span class="line">                                <span class="string">"end; "</span> + </span><br><span class="line">                            <span class="string">"end; "</span> + </span><br><span class="line">                        <span class="string">"end; "</span> +</span><br><span class="line">                    <span class="string">"end; "</span> +</span><br><span class="line">                    </span><br><span class="line">                    <span class="string">"return 1; "</span> +</span><br><span class="line">                <span class="string">"end; "</span> +</span><br><span class="line">                <span class="string">"return 0;"</span>,</span><br><span class="line">            Arrays.&lt;Object&gt;asList(getName(), keyPrefix), </span><br><span class="line">            internalLockLeaseTime, getLockName(threadId));</span><br></pre></td></tr></table></figure><p>还是一样，先来分析一下各个参数都是什么意思：</p><ul><li><ul><li>KEYS[1] : 锁key  = anyLock</li><li>KEYS[2] : {anyLock}</li><li>ARGV[1] : 默认过期时间 30000ms</li><li>ARGV[2] : 客户端UUID:ThreadId = UUID_01:ThreadId_01</li></ul></li></ul><p>首先就是去获取加锁时的那个 hash 结构中，加锁客户端的值，判断如果有值的话，就直接将 anyLock 值刷新为默认的 30秒。</p><p>然后再去判断 anyLock 这个 hash 结构中是否有多个 key ，这里是满足的，获取到全部的 key ，遍历，找到值是 <strong>number</strong> 类型的key ，这里只有上面设置的 <strong>hset anyLock UUID_01:ThreadId_01 1 是满足的，</strong>因为读锁是可以加多个的，也可以说是可重入的，所以这里就是获取到加锁的个数，然后通过遍历，每次递减一，调用 pexpire {anyLock}:<strong>anyLock UUID_01:ThreadId_01:rwlock_timeout:1 30000ms，刷新生存时间，这个值其实就是上面加锁时设置的</strong> set {anyLock}:UUID_01:ThreadId_01:rwlock_timeout:1 1 ，最后返回 1，表示刷新成功。</p><h4 id="6-2-写锁"><a href="#6-2-写锁" class="headerlink" title="6.2 写锁"></a>6.2 写锁</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"local mode = redis.call('hget', KEYS[1], 'mode'); "</span> +</span><br><span class="line">                            <span class="string">"if (mode == false) then "</span> +</span><br><span class="line">                                  <span class="string">"redis.call('hset', KEYS[1], 'mode', 'write'); "</span> +</span><br><span class="line">                                  <span class="string">"redis.call('hset', KEYS[1], ARGV[2], 1); "</span> +</span><br><span class="line">                                  <span class="string">"redis.call('pexpire', KEYS[1], ARGV[1]); "</span> +</span><br><span class="line">                                  <span class="string">"return nil; "</span> +</span><br><span class="line">                              <span class="string">"end; "</span> +</span><br><span class="line">                              <span class="string">"if (mode == 'write') then "</span> +</span><br><span class="line">                                  <span class="string">"if (redis.call('hexists', KEYS[1], ARGV[2]) == 1) then "</span> +</span><br><span class="line">                                      <span class="string">"redis.call('hincrby', KEYS[1], ARGV[2], 1); "</span> + </span><br><span class="line">                                      <span class="string">"local currentExpire = redis.call('pttl', KEYS[1]); "</span> +</span><br><span class="line">                                      <span class="string">"redis.call('pexpire', KEYS[1], currentExpire + ARGV[1]); "</span> +</span><br><span class="line">                                      <span class="string">"return nil; "</span> +</span><br><span class="line">                                  <span class="string">"end; "</span> +</span><br><span class="line">                                <span class="string">"end;"</span> +</span><br><span class="line">                                <span class="string">"return redis.call('pttl', KEYS[1]);"</span>,</span><br><span class="line">                        Arrays.&lt;Object&gt;asList(getName()), </span><br><span class="line">                        internalLockLeaseTime, getLockName(threadId));</span><br></pre></td></tr></table></figure><p>KEYS[1] = anyLock ， </p><p>ARGV[1] = 30000ms , ARGV[2] = UUID_01:ThreadId_01:write</p><p>首先还是从 mode 中获取值，默认是没有的，就会执行下面的执行，set anyLock mode write，</p><p>set anyLock UUID_01:ThreadId_01:write 1  ， 然后设置默认的过期时间，这里的主要逻辑基本和读锁是一致的，就是欢乐一下 mode 为 write。</p><h4 id="6-3-读锁读锁非互斥"><a href="#6-3-读锁读锁非互斥" class="headerlink" title="6.3 读锁读锁非互斥"></a>6.3 读锁读锁非互斥</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"if (mode == 'read') or (mode == 'write' and redis.call('hexists', KEYS[1], ARGV[3]) == 1) then "</span> +</span><br><span class="line">                                  <span class="string">"local ind = redis.call('hincrby', KEYS[1], ARGV[2], 1); "</span> + </span><br><span class="line">                                  <span class="string">"local key = KEYS[2] .. ':' .. ind;"</span> +</span><br><span class="line">                                  <span class="string">"redis.call('set', key, 1); "</span> +</span><br><span class="line">                                  <span class="string">"redis.call('pexpire', key, ARGV[1]); "</span> +</span><br><span class="line">                                  <span class="string">"redis.call('pexpire', KEYS[1], ARGV[1]); "</span> +</span><br><span class="line">                                  <span class="string">"return nil; "</span> +</span><br><span class="line">                                <span class="string">"end;"</span> +</span><br><span class="line">                                <span class="string">"return redis.call('pttl', KEYS[1]);"</span>,</span><br></pre></td></tr></table></figure><ul><li>KEYS[1] : 当前设置的锁Key = anyLock</li><li>KEYS[2] : {锁key}:客户端的uuid:threadId:rwlock_timeout = {anyLock}:UUID_02:ThreadId_02:rwlock_timeout</li><li>ARGV[1] : 默认过期时间 = 30000ms</li><li>ARGV[2] : 客户端:qUUID:threadID = UUID_02:ThreadId_02</li><li>ARGV[3] :  客户端UUID:threadID:write = UUID_02:ThreadId_02:write</li></ul><p>这里的话，首先客户端A是已经获取到读锁的，这时候客户端B要来加读锁，这里会先判断 mode 是不是 read ，或者说，加的是写锁，但加写锁的是当前的客户端，这样就可以走下面的逻辑，将 UUID_02:ThreadId_02 递增1，获取到的 ind 的值也是1，然后拼接 key {anyLock}:UUID_02:ThreadId_02:rwlock_timeout:1  ， 设置这个key值为1，并设置过期时间，在刷新主 key 的值。</p><p>当加锁成功之后，会设置调度任务，也就是 watchdog ，进行执行刷新生存周期的逻辑，这个就和之前分析的是一样。</p><p>执行到这里我们可以发现，读锁和读锁是不互斥的，只会在 anyLock 的主key中新增 key值，并设置当前客户端的值。</p><h4 id="6-4-读锁写锁互斥"><a href="#6-4-读锁写锁互斥" class="headerlink" title="6.4 读锁写锁互斥"></a>6.4 读锁写锁互斥</h4><p>其实走上面的 lua 脚本就可以发现，如果加了读锁在去加写锁的话，是不会走任何一个 if 的，最后之后执行 ttl 指令，返回一个剩余时间，这时就代表是加锁失败，客户端会进入一个 while(true) 的死循环，尝试获取锁。</p><p>当先加了写锁再去加读锁的时候，只有是当前客户端加的写锁，才能进入 if 中，设置相对应的 key 信息，反之，加锁失败。</p>]]></content:encoded>
      
      
      <category domain="http://Songtg0512.github.io/categories/%E5%88%86%E7%B1%BB1/">分类1</category>
      
      <category domain="http://Songtg0512.github.io/categories/%E5%88%86%E7%B1%BB1/%E5%88%86%E7%B1%BB2/">分类2</category>
      
      
      <category domain="http://Songtg0512.github.io/tags/%E6%A0%87%E7%AD%BE1/">标签1</category>
      
      <category domain="http://Songtg0512.github.io/tags/%E6%A0%87%E7%AD%BE2/">标签2</category>
      
      
      <comments>http://songtg0512.github.io/posts/hello_url.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>你好世界</title>
      <link>http://songtg0512.github.io/posts/hello_url.html</link>
      <guid>http://songtg0512.github.io/posts/hello_url.html</guid>
      <pubDate>Fri, 08 May 2020 12:03:00 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;你好&quot;&gt;&lt;a href=&quot;#你好&quot; class=&quot;headerlink&quot; title=&quot;你好&quot;&gt;&lt;/a&gt;你好&lt;/h1&gt;&lt;p&gt;世界&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="你好"><a href="#你好" class="headerlink" title="你好"></a>你好</h1><p>世界</p><a id="more"></a><p>这是阅读全文</p><img src="/images/404.jpg" class="">]]></content:encoded>
      
      
      <category domain="http://Songtg0512.github.io/categories/%E5%88%86%E7%B1%BB1/">分类1</category>
      
      <category domain="http://Songtg0512.github.io/categories/%E5%88%86%E7%B1%BB1/%E5%88%86%E7%B1%BB2/">分类2</category>
      
      
      <category domain="http://Songtg0512.github.io/tags/%E6%A0%87%E7%AD%BE1/">标签1</category>
      
      <category domain="http://Songtg0512.github.io/tags/%E6%A0%87%E7%AD%BE2/">标签2</category>
      
      
      <comments>http://songtg0512.github.io/posts/hello_url.html#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
